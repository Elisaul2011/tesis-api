// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model inventario {
  idInventario     Int                @id @default(autoincrement())
  almacenes        almacenes          @relation(fields: [almacenesId], references: [idAlmacenes])
  almacenesId      Int
  pn               String
  descripcion      String
  idTipoComponente tipoComponente     @relation(fields: [tipoComponenteId], references: [idTipoComponente])
  tipoComponenteId Int
  sn               String
  cantidad         Int
  lote             String
  idEstado         estado             @relation(fields: [estadoId], references: [idEstado])
  estadoId         Int
  shelfLife        DateTime
  order            String
  aeronave         aeronave[]
  tallerReparacion tallerReparacion[]
  inspeccion       inspeccion[]
}

model inspeccion {
  idInspeccion Int        @id @default(autoincrement())
  idInventario inventario @relation(fields: [inventarioId], references: [idInventario])
  inventarioId Int
  orderInsp    String
}

model ordenCompra {
  idOrdenCompra Int      @id @default(autoincrement())
  ordenCompra   String
  Fecha         DateTime
  descripcion   String
  cantidad      Int
  pn            String
  sn            String
}

model necesidadesTecnicas {
  idNecesidadesTecnicas Int @id @default(autoincrement())
  pn               String
  descripcion      String
  cantidad         Int
}
model aeronave {
  idAeronave   Int        @id @default(autoincrement())
  aeronave     String
  idInventario inventario @relation(fields: [inventarioId], references: [idInventario])
  inventarioId Int
  workOrder    String
}

model tallerReparacion {
  idTaller      Int        @id @default(autoincrement())
  taller        String
  idInventario  inventario @relation(fields: [inventarioId], references: [idInventario])
  inventarioId  Int
  workshopOrder String
}

model componente {
  idComponente     Int            @id @default(autoincrement())
  pn               String
  sn               String
  fabricante       String
  idAlmacenes      almacenes      @relation(fields: [almacenesId], references: [idAlmacenes])
  almacenesId      Int
  aterrizajes      Int
  descripcion      String
  idATA            atas           @relation(fields: [ataId], references: [IdAta])
  ataId            Int
  idZona           zona           @relation(fields: [zonaId], references: [idZona])
  zonaId           Int
  idTipoComponente tipoComponente @relation(fields: [tipoComponenteId], references: [idTipoComponente])
  tipoComponenteId Int
  horas            Int
  idEstado         estado         @relation(fields: [estadoId], references: [idEstado])
  estadoId         Int
  shelfLife        DateTime
  ciclos           Int
}

model horasManuales {
  idHorasManuales Int      @id @default(autoincrement())
  fecha           DateTime
  horas           Int
  ciclos          Int
  aterrizajes     Int
}

model prestar {
  idPrestar        Int            @id @default(autoincrement())
  idAlmacenes      almacenes      @relation(fields: [almacenesId], references: [idAlmacenes])
  almacenesId      Int
  idZona           zona           @relation(fields: [zonaId], references: [idZona])
  zonaId           Int
  pn               String
  descripcion      String
  idTipoComponente tipoComponente @relation(fields: [tipoComponenteId], references: [idTipoComponente])
  tipoComponenteId Int
  sn               String
  cantidad         Int
  lote             String
  condicion        String
  idEstado         estado         @relation(fields: [estadoId], references: [idEstado])
  estadoId         Int
}

model estado {
  idEstado         Int                @id @default(autoincrement())
  estado           String
  inventario       inventario[]
  componente       componente[]
  prestar          prestar[]
  reporteShelfLife reporteShelfLife[]
  historial        historial[]
}

model reporteShelfLife {
  idReporteShelfLife Int            @id @default(autoincrement())
  idAlmacenes        almacenes      @relation(fields: [almacenesId], references: [idAlmacenes])
  almacenesId        Int
  idZona             zona           @relation(fields: [zonaid], references: [idZona])
  zonaid             Int
  pn                 String
  descripcion        String
  idTipoComponente   tipoComponente @relation(fields: [tipoComponenteId], references: [idTipoComponente])
  tipoComponenteId   Int
  sn                 String
  cantidad           Int
  lote               String
  idEstado           estado         @relation(fields: [estadoId], references: [idEstado])
  estadoId           Int
  shelfLife          DateTime
  venceEn            Int
}

model historial {
  idHistorial      Int            @id @default(autoincrement())
  fechaMovimiento  DateTime
  pn               String
  descripcion      String
  sn               String
  cantidad         Int
  origen           String
  destino          String
  realizadoPor     String
  idTipoMovimiento tipoMovimiento @relation(fields: [tipoMovimientoId], references: [idTipoMovimiento])
  tipoMovimientoId Int
  idEstado         estado         @relation(fields: [estadoId], references: [idEstado])
  estadoId         Int
  order            String
}

model tipoMovimiento {
  idTipoMovimiento Int         @id @default(autoincrement())
  tipoMovimiento   String
  historial        historial[]
}

model tipoComponente {
  idTipoComponente Int                @id @default(autoincrement())
  tipoComponente   String
  inventario       inventario[]
  componente       componente[]
  prestar          prestar[]
  reporteShelfLife reporteShelfLife[]
}

model controlMantenimiento {
  idControlMantenimiento Int    @id @default(autoincrement())
  controlMantenimiento   String
}

model atas {
  IdAta      Int          @id @default(autoincrement())
  CodigoAta  String       @db.VarChar(30)
  NombreATA  String       @db.VarChar(200)
  componente componente[]
}

model user {
  idUser       Int     @id @default(autoincrement())
  nameUser     String
  lastnameUser String
  rolId        Int
  active       Boolean
  password     String  @db.VarChar(50)
  roles        roles   @relation(fields: [rolId], references: [idRol], map: "User_rolId_fkey")

  @@index([rolId], map: "User_rolId_fkey")
}

model roles {
  idRol Int    @id @default(autoincrement())
  rol   String
  // tecnico     
  // inspector   
  // almacenista
  // jefe de almacen 
  user  user[]
}

model almacenes {
  idAlmacenes      Int                @id @default(autoincrement())
  nombre           String
  descripcion      String
  pais             String
  ciudad           String
  estado           Int
  idZona           zona               @relation(fields: [zonaId], references: [idZona])
  zonaId           Int
  inventario       inventario[]
  componente       componente[]
  prestar          prestar[]
  reporteShelfLife reporteShelfLife[]
}

model zona {
  idZona           Int                @id @default(autoincrement())
  zona             String
  descripcionZona  String
  componente       componente[]
  prestar          prestar[]
  reporteShelfLife reporteShelfLife[]
  almacenes        almacenes[]
}
